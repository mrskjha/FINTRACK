generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  aiInsights     AiInsight[]
  budgets        Budget[]
  smartContracts SmartContract[]
  transactions   Transaction[]
  wallets        Wallet[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  description String?
  date        DateTime @default(now())
  categoryId  String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category    Category @relation(fields: [categoryId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id           String        @id @default(cuid())
  name         String
  icon         String?
  color        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  budgets      Budget[]
  transactions Transaction[]
}

model Budget {
  id         String   @id @default(cuid())
  amount     Float
  categoryId String
  userId     String
  month      Int
  year       Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  category   Category @relation(fields: [categoryId], references: [id])
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AiInsight {
  id          String   @id @default(cuid())
  type        String
  title       String
  description String
  impact      String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SmartContract {
  id            String    @id @default(cuid())
  name          String
  description   String?
  status        String
  type          String
  amount        Float?
  frequency     String?
  nextExecution DateTime?
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Wallet {
  id        String   @id @default(cuid())
  address   String
  type      String
  name      String?
  balance   Float    @default(0)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
